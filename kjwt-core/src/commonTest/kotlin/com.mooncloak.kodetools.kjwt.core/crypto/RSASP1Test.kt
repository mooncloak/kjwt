package com.mooncloak.kodetools.kjwt.core.crypto

import com.ionspin.kotlin.bignum.integer.BigInteger
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertFailsWith

// FIXME: Tests were generated by AI and are failing.
class Rsasp1Tests {

    @Test
    fun rsasp1_with_n_and_d_valid_input() {
        val n = BigInteger(323) // Example n (p * q)
        val d = BigInteger(173) // Example d
        val m = BigInteger(100)

        val expectedSignature = BigInteger(253)
        val actualSignature = RSASP1(n = n, d = d, m = m)

        assertEquals(expectedSignature, actualSignature)
    }

    @Test
    fun rsasp1_with_quintuple_valid_input() {
        val p = BigInteger(17)
        val q = BigInteger(19)
        val dP = BigInteger(13)
        val dQ = BigInteger(7)
        val qInv = BigInteger(11)
        val m = BigInteger(100)

        val expectedSignature = BigInteger(200)
        val actualSignature = RSASP1(p = p, q = q, dP = dP, dQ = dQ, qInv = qInv, m = m)

        assertEquals(expectedSignature, actualSignature)
    }

    @Test
    fun rsasp1_with_quintuple_message_out_of_range() {
        val p = BigInteger(17)
        val q = BigInteger(19)
        val dP = BigInteger(13)
        val dQ = BigInteger(7)
        val qInv = BigInteger(11)
        val m = BigInteger(323) // p * q = 323

        assertFailsWith<IllegalArgumentException> {
            RSASP1(p = p, q = q, dP = dP, dQ = dQ, qInv = qInv, m = m)
        }
    }

    @Test
    fun rsasp1_with_triplets_valid_input() {
        val p = BigInteger(17)
        val q = BigInteger(19)
        val dP = BigInteger(13)
        val dQ = BigInteger(7)
        val qInv = BigInteger(11)
        val triplets = listOf(
            Triple(BigInteger(5), BigInteger(3), BigInteger(10)),
            Triple(BigInteger(7), BigInteger(5), BigInteger(20))
        )
        val m = BigInteger(100)

        val expectedSignature = BigInteger(250)
        val actualSignature = RSASP1(
            p = p,
            q = q,
            dP = dP,
            dQ = dQ,
            qInv = qInv,
            triplets = triplets,
            m = m
        )

        assertEquals(expectedSignature, actualSignature)
    }
}
